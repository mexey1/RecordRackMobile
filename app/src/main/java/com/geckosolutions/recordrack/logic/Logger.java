package com.geckosolutions.recordrack.logic;

import android.content.Context;
import android.os.Environment;

import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.FileWriter;
import java.io.IOException;
import java.io.OutputStreamWriter;
import java.io.PrintWriter;
import java.io.StringWriter;
import java.text.SimpleDateFormat;
import java.util.Calendar;

/**
 * Created by anthony1 on 1/19/18.
 * This class is responsible for creating and retrieving logs generated by the application
 */

public class Logger
{
    /**
     * method called to initialize logging. It creates the directories where log files would reside.
     * Logs are written to the internal storage
     */

    private static SimpleDateFormat sdf = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
    private static File logFile,exception;
    private static PrintWriter fw,fw1;
    private static void init()
    {
        try
        {
            //String date = getTodaysDate();
            //File logsDir = UtilityClass.getContext().getDir("logs", Context.MODE_PRIVATE);
            logFile = new File(UtilityClass.getLogPath()+"/Log.txt");
            exception = new File(UtilityClass.getLogPath()+"/Exception.txt");

            if(!logFile.exists())
                logFile.createNewFile();

            if(!exception.exists())
                exception.createNewFile();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    /**
     * method that writes logs to either the log or exception files created at the init
     * @param text
     * @param type
     */
    private static void writeLog(String text,int type)
    {
        try
        {
            if(type == 0)
            {
                if(logFile == null)
                    init();
                if(fw == null)
                    fw = new PrintWriter(new FileWriter(logFile,true));

                fw.append(UtilityClass.getDateTime()+"\t\t"+text+"\n");
            }

        }
        catch (FileNotFoundException e)
        {
            e.printStackTrace();
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public static void log(String tag,String msg)
    {
        try
        {
            if(logFile == null)
                init();
            if(fw == null)
                fw = new PrintWriter(new FileWriter(logFile,true));
            String logMessage=sdf.format(Calendar.getInstance().getTime()) +"  "+tag+":  "+msg;
            fw.append(logMessage);
            fw.append("\n");
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    public static void writeException(Throwable text,int p)
    {
        System.out.println("exception written to servers " + Thread.currentThread().getName());
        StringWriter stringWriter = new StringWriter();
        PrintWriter pw = new PrintWriter(stringWriter);
        text.printStackTrace(pw);
        System.out.println("exception written to serverd " + Thread.currentThread().getName());
        DataUploadClass.uploadExceptionToServer(UtilityClass.getRackID(),exception.getName(),stringWriter.toString());
        System.out.println("exception written to servered");
    }

    public static void writeException(Throwable text)
    {
        try
        {
            if(exception == null)
                init();
            if(fw1 == null)
                fw1 = new PrintWriter(new FileWriter(exception,true));
            String logMessage=sdf.format(Calendar.getInstance().getTime())+" "+text.getMessage();
            fw1.append(logMessage);
            text.printStackTrace(fw1);
            //String logMessage=sdf.format(Calendar.getInstance().getTime() +"  "+tag+":  "+msg);
        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }
    /**public static void writeException(final Throwable text)
    {
        System.out.println("got heres "+Thread.currentThread().getName());
        //internally move all calls to this method to the LoggerThread
        LoggerThread.getLoggerThread().postLoggerTask(new Runnable()
        //NetworkThread.getNetworkThread().postNetworkTask(new Runnable()
        {
            @Override
            public void run()
            {
                try
                {
                    System.out.println("got here");

                    //exception being written
                    if(exception == null)
                        init();
                    if(fw1 == null)
                        fw1 = new PrintWriter(new FileWriter(exception,true));

                    fw1.append(UtilityClass.getDateTime()+"\t\t\n");
                    text.printStackTrace(fw1);


                    //once we are done writing the log to the file, we'd like to also send to the server for
                    //debugging purposes
                    StringWriter stringWriter = new StringWriter();
                    PrintWriter pw = new PrintWriter(stringWriter);
                    text.printStackTrace(pw);
                    DataUploadClass.uploadExceptionToServer(UtilityClass.getRackID(),exception.getName(),stringWriter.toString());
                    System.out.println("exception written to server");
                }
                //catch (FileNotFoundException e)
                catch (Exception e)
                {
                    e.printStackTrace();
                }
            }
        });
    }*/

    private static Calendar getTodaysDate()
    {
        Calendar calendar = Calendar.getInstance();

        //String date = calendar.get(Calendar.YEAR)+"-"+(Calendar.MONTH+1)+"-"+Calendar.DATE;
        return calendar;
    }
    public static void writeLog(final String text)
    {
        LoggerThread.getLoggerThread().postLoggerTask(new Runnable() {
            @Override
            public void run()
            {
                writeLog(text,0);
            }
        });
    }

    public static void finish()
    {
        if(fw != null)
        {
            fw.flush();
            fw.close();
        }
        if(fw1 != null)
        {
            fw1.flush();
            fw1.close();
        }

        fw = null;
        fw1 = null;
        logFile = null;
        exception = null;
    }
}
